;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/jetton-utils.fc";

const const::max_prev_supply = 4288;
const const::token_price = 5000000; ;; 0.005 TON
const const::min_tons_for_storage = 10000000; ;; 0.01 TON
const int error::discovery_fee_not_matched = 75;
const int error::unauthorized_mint_request = 73;

(int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_coins(), ;; total_supply
      ds~load_msg_addr(), ;; admin_address
      ds~load_ref(), ;; content
      ds~load_ref()  ;; jetton_wallet_code
  );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
           .end_cell()
          );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6) ;; bounceable
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    if (op == op::mint()) {
        throw_unless(error::unauthorized_mint_request, equal_slice_bits(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int forward_ton_amount = in_msg_body~load_coins();
        int total_ton_amount = in_msg_body~load_coins();
        throw_unless(101, total_supply + jetton_amount <= const::max_prev_supply);
        throw_unless(75, total_ton_amount > forward_ton_amount);
        cell mint_request = begin_cell()
                .store_uint(0x178d4519, 32)
                .store_uint(query_id, 64)
                .store_coins(jetton_amount) ;; max 124 bit
                .store_uint(0, 2) ;; from_address, addr_none$00
                .store_slice(my_address()) ;; response_address, 3 + 8 + 256 = 267 bit
                .store_coins(forward_ton_amount) ;; forward_amount, 4 bit if zero
                .store_uint(0, 1) ;; no forward_payload, 1 bit
                .end_cell();
        mint_tokens(to_address, jetton_wallet_code, total_ton_amount, mint_request);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code);
        return ();
    }

    if (op == op::withdraw()) {
      throw_unless(73, equal_slices(sender_address, admin_address));
      int withdraw_amount = in_msg_body~load_coins();
      var [balance, _] = get_balance();
      throw_unless(104, balance >= withdraw_amount);

      int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

      int msg_mode = 1; ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)

      var msg = begin_cell()
              .store_uint(0x18, 6)
              .store_slice(sender_address)
              .store_coins(return_value)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

      send_raw_message(msg.end_cell(), msg_mode);
      return();
    }

    if (op == op::buy()) {
      int min_ton_amount = const::token_price + 50000000; ;; price for 1 jetton + min storage fee
      int forward_ton_amount = in_msg_body~load_coins();
      int total_ton_amount = in_msg_body~load_coins();
      ~strdump("total_ton_amount");
      ~dump(total_ton_amount);
      int jetton_amount = calculate_jetton_amount(total_ton_amount, const::token_price);
      ~strdump("jetton_amount");
      ~dump(jetton_amount);
      throw_unless(101, total_supply + jetton_amount <= const::max_prev_supply);
      throw_unless(75, total_ton_amount > forward_ton_amount);
      throw_unless(76, (total_ton_amount > min_ton_amount));
      throw_unless(77, (jetton_amount > 0));
      cell mint_request = begin_cell()
            .store_uint(0x178d4519, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount) ;; max 124 bit
            .store_uint(0, 2) ;; from_address, addr_none$00
            .store_slice(my_address()) ;; response_address, 3 + 8 + 256 = 267 bit
            .store_coins(forward_ton_amount) ;; forward_amount, 4 bit if zero
            .store_uint(0, 1) ;; no forward_payload, 1 bit
            .end_cell();
      mint_tokens(sender_address, jetton_wallet_code, total_ton_amount, mint_request);
      save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
      return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code);
        return ();
    }

    if (op == op::upgrade()) {
      throw_unless(73, equal_slices(sender_address, admin_address));
      cell code = in_msg_body~load_ref();
      set_code(code);
      return ();
    }

    if (op == op::destroy()) {
      ~strdump("op::destroy()");
      ~dump(op);
      throw_unless(73, equal_slices(sender_address, admin_address));
      var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
            
      send_raw_message(msg.end_cell(), 128 + 32); ;; send all recieved tokens and destroy contract
      return();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    var mintable = total_supply < const::max_prev_supply;    
    return (total_supply, mintable, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

(int) get_minter_balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}